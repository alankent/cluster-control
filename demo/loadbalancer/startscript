#!/bin/sh

set -x

cd /var/www
env

CLUSTERCONTROL="/cluster-control/bin/cluster-control --verbose"

# Create the cluster-control.config file, substituing in the ETC_URL and
# PUBLIC_HOST_AND_PORT environment variables.
php create-config.php
cat cluster-control.conf

# Refresh cluster member configuration files before we start web server.
WEBSERVER_INDEX=$($CLUSTERCONTROL cc:clusterprepare webserver)

# Spawn background job to wait for server to accept connections, then signal
# we are alive to the world and start watching for change events.
(
    # Convert host:port into host/port.
    PUBLIC_HOST_SLASH_PORT=$(echo $PUBLIC_HOST_AND_PORT | tr : /)

    # Loop in background until server is accepting TCP connections.
    echo 'Waiting for web server to accept connections...'
    while ! timeout 1 bash -c "cat < /dev/null > /dev/tcp/$PUBLIC_HOST_SLASH_PORT"; do
        echo 'Still waiting...'
    done
    echo 'Web server is up!'

    # Send a single heartbeat to create the key in etcd indicating we are alive.
    $CLUSTERCONTROL cc:heartbeat --once

    # Watch for the key disappearing, and exit immediately (don't wait for heartbeat)
    # We know at least one heartbeat has occurred (because of the cc:heartbeat --once above)
    ($CLUSTERCONTROL cc:watchkey ; apachectl graceful-stop) &

    # Start the heartbeat generator. Returns when fails to update key (e.g. if deleted
    # to make server shut down), so when it returns may as well ask apache to shut down.
    ($CLUSTERCONTROL cc:heartbeat ; apachectl graceful-stop ; sleep 5 ; apachectl stop) &

    # Tell Apache to restart if any configuration changes (not strictly required as
    # the current application does not cache anything - this is for illustration however)
    $CLUSTERCONTROL cc:clusterwatch webserver $WEBSERVER_INDEX apachectl graceful &
) &

# Start up web server, container will exit when this exits.
/usr/sbin/apache2 -D FOREGROUND

# Double check key has been removed (it will timeout anyway due to TTL)
$CLUSTERCONTROL cc:removekey

exit 0
